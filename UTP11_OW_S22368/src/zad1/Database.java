package zad1;

import java.math.BigDecimal;
import java.sql.*;
import java.text.NumberFormat;
import java.util.*;

public class Database {
    private Connection connection;
    private TravelData travelData;

    public Database(String url, TravelData travelData) {
        try {
            connection = DriverManager.getConnection(url);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        this.travelData = travelData;
    }

    public void create() {
        try (
            Statement statement = connection.createStatement()
        ) {
            // drop Table
            try { statement.executeUpdate("DROP TABLE Offer"); } catch (Exception e) {}

            // create table
            statement.executeUpdate(
            "CREATE TABLE Offer (" +
                "idOffer INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY," +
                "country VARCHAR(3) NOT NULL," +
                "departureDate DATE NOT NULL," +
                "returnDate DATE NOT NULL," +
                "place VARCHAR(20) NOT NULL," +
                "price DECIMAL(7, 2) NOT NULL," +
                "currency VARCHAR(3) NOT NULL," +
                "PRIMARY KEY(idOffer)" +
                ")"
            );

            PreparedStatement preparedStatement = connection.prepareStatement(
            "INSERT INTO Offer (country, departureDate, returnDate, place, price, currency)" +
                "VALUES (?, ?, ?, ?, ?, ?)"
            );

            // insert data
            for (Offer offer: travelData.getOffers()) {
                preparedStatement.setString(1, offer.getCountry().getCountry());
                preparedStatement.setDate(2, new java.sql.Date(offer.getDepartureDate().getTime()));
                preparedStatement.setDate(3, new java.sql.Date(offer.getReturnDate().getTime()));
                preparedStatement.setString(4, offer.getPlace().getName());
                preparedStatement.setBigDecimal(5, offer.getPrice());
                preparedStatement.setString(6, offer.getCurrency().getCurrencyCode());

                preparedStatement.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    public List<List<Object>> getData(Locale locale) {
        List<List<Object>> data = new ArrayList<>();
        ResourceBundle places = ResourceBundle.getBundle("zad1.locales.places", locale);

        try (Statement statement = connection.createStatement()) {
            ResultSet resultSet = statement.executeQuery("SELECT country, departureDate, returnDate, place, price, currency FROM Offer");

            while (resultSet.next()) {
                String country = resultSet.getString(1);
                java.util.Date departureDate = resultSet.getDate(2);
                java.util.Date arrivalDate = resultSet.getDate(3);
                String place = resultSet.getString(4);
                BigDecimal price = resultSet.getBigDecimal(5);
                String currency = resultSet.getString(6);

                data.add(Arrays.asList(
                        (new Locale("", country)).getDisplayCountry(locale),
                        departureDate,
                        arrivalDate,
                        places.getString(place),
                        NumberFormat.getInstance(locale).format(price),
                        currency
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return data;
    }

    public void showGui() {
        new GUI(this).init();
    }
}
